/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package example

import (
	"acme.corp/pkg/kcp/clients/informers/externalversions/example/v1"
	"acme.corp/pkg/kcp/clients/informers/externalversions/example/v1alpha1"
	"acme.corp/pkg/kcp/clients/informers/externalversions/example/v1beta1"
	"acme.corp/pkg/kcp/clients/informers/externalversions/example/v2"
	"acme.corp/pkg/kcp/clients/informers/externalversions/internalinterfaces"
)

type ClusterInterface interface {
	// V1 provides access to the shared informers in V1.
	V1() v1.ClusterInterface
	// V1alpha1 provides access to the shared informers in V1alpha1.
	V1alpha1() v1alpha1.ClusterInterface
	// V1beta1 provides access to the shared informers in V1beta1.
	V1beta1() v1beta1.ClusterInterface
	// V2 provides access to the shared informers in V2.
	V2() v2.ClusterInterface
}

type group struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new ClusterInterface.
func New(f internalinterfaces.SharedInformerFactory, tweakListOptions internalinterfaces.TweakListOptionsFunc) ClusterInterface {
	return &group{factory: f, tweakListOptions: tweakListOptions}
}

// V1 returns a new v1.ClusterInterface.
func (g *group) V1() v1.ClusterInterface {
	return v1.New(g.factory, g.tweakListOptions)
}

// V1alpha1 returns a new v1alpha1.ClusterInterface.
func (g *group) V1alpha1() v1alpha1.ClusterInterface {
	return v1alpha1.New(g.factory, g.tweakListOptions)
}

// V1beta1 returns a new v1beta1.ClusterInterface.
func (g *group) V1beta1() v1beta1.ClusterInterface {
	return v1beta1.New(g.factory, g.tweakListOptions)
}

// V2 returns a new v2.ClusterInterface.
func (g *group) V2() v2.ClusterInterface {
	return v2.New(g.factory, g.tweakListOptions)
}

type Interface interface {
	// V1 provides access to the shared informers in V1.
	V1() v1.Interface
	// V1alpha1 provides access to the shared informers in V1alpha1.
	V1alpha1() v1alpha1.Interface
	// V1beta1 provides access to the shared informers in V1beta1.
	V1beta1() v1beta1.Interface
	// V2 provides access to the shared informers in V2.
	V2() v2.Interface
}

type scopedGroup struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// New returns a new Interface.
func NewScoped(f internalinterfaces.SharedScopedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return &scopedGroup{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}

// V1 returns a new v1.ClusterInterface.
func (g *scopedGroup) V1() v1.Interface {
	return v1.NewScoped(g.factory, g.namespace, g.tweakListOptions)
}

// V1alpha1 returns a new v1alpha1.ClusterInterface.
func (g *scopedGroup) V1alpha1() v1alpha1.Interface {
	return v1alpha1.NewScoped(g.factory, g.namespace, g.tweakListOptions)
}

// V1beta1 returns a new v1beta1.ClusterInterface.
func (g *scopedGroup) V1beta1() v1beta1.Interface {
	return v1beta1.NewScoped(g.factory, g.namespace, g.tweakListOptions)
}

// V2 returns a new v2.ClusterInterface.
func (g *scopedGroup) V2() v2.Interface {
	return v2.NewScoped(g.factory, g.namespace, g.tweakListOptions)
}
