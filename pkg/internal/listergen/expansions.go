package listergen

import (
	"io"
	"text/template"

	"github.com/kcp-dev/code-generator/v2/pkg/parser"
)

type Expansions struct {
	// Group is:
	// - the name of the API group, e.g. "authorization",
	// - the version and package path of the API, e.g. "v1" and "k8s.io/api/rbac/v1"
	Group parser.Group
	// Kind is the kind for which we are generating listers, e.g. "ClusterRole"
	Kind parser.Kind

	// UseUpstreamInterfaces determines if we're generating against existing single-cluster lister interfaces or not.
	UseUpstreamInterfaces bool
}

func (l *Expansions) WriteContent(w io.Writer) error {
	templ, err := template.New("expansions").Funcs(templateFuncs).Parse(expansions)
	if err != nil {
		return err
	}

	m := map[string]interface{}{
		"group":                 l.Group,
		"kind":                  &l.Kind,
		"useUpstreamInterfaces": l.UseUpstreamInterfaces,
	}
	return templ.Execute(w, m)
}

var expansions = `
// Code generated by kcp code-generator. DO NOT EDIT.

package {{.group.Version.PackageName}}

// {{.kind.String}}ClusterListerExpansion allows custom methods to be added to {{.kind.String}}ClusterLister.
type {{.kind.String}}ClusterListerExpansion interface {}

{{ if not .useUpstreamInterfaces -}}
// {{.kind.String}}ListerExpansion allows custom methods to be added to {{.kind.String}}Lister.
type {{.kind.String}}ListerExpansion interface {}
{{ if  .kind.IsNamespaced -}}
// {{.kind.String}}NamespaceListerExpansion allows custom methods to be added to {{.kind.String}}NamespaceLister.
type {{.kind.String}}NamespaceListerExpansion interface {}
{{ end -}}
{{ end -}}
`
