/*
Copyright 2022 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package informergen

import (
	"io"
	"strings"
	"text/template"

	"github.com/kcp-dev/code-generator/v2/pkg/parser"
)

type GroupInterface struct {
	// Group is the group for which we're generating interfaces
	Group parser.Group

	// Versions are the versions of this group for which we're generating interfaces
	Versions []parser.Version

	// PackagePath is the package under which these informers will be exposed.
	// e.g. "github.com/kcp-dev/client-go/clients/informers"
	// TODO(skuznets) we should be able to figure this out from the output dir, ideally
	PackagePath string

	// UseUpstreamInterfaces determines if we're generating against existing single-cluster informer interfaces or not.
	UseUpstreamInterfaces bool
}

func (g GroupInterface) WriteContent(w io.Writer) error {
	templ, err := template.New("groupInterface").Funcs(templateFuncs).Parse(groupInterface)
	if err != nil {
		return err
	}

	m := map[string]interface{}{
		"group":                 g.Group,
		"packageName":           strings.ReplaceAll(g.Group.PackageName(), "-", ""),
		"packagePath":           g.PackagePath,
		"versions":              g.Versions,
		"useUpstreamInterfaces": g.UseUpstreamInterfaces,
	}
	return templ.Execute(w, m)
}

var groupInterface = `
// Code generated by kcp code-generator. DO NOT EDIT.

package {{.packageName}}

import (
{{range .versions}}	"{{$.packagePath}}/{{$.group.PackageName}}/{{.PackageName}}"
{{end -}}

	"{{.packagePath}}/internalinterfaces"
)

type ClusterInterface interface {
{{range .versions}}	// {{.String}} provides access to the shared informers in {{.String}}.
	{{.String}}() {{.PackageName}}.ClusterInterface
{{end -}}
}

type group struct {
	factory internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new ClusterInterface.
func New(f internalinterfaces.SharedInformerFactory, tweakListOptions internalinterfaces.TweakListOptionsFunc) ClusterInterface {
	return &group{factory: f, tweakListOptions: tweakListOptions}
}

{{range .versions}}// {{.String}} returns a new {{.PackageName}}.ClusterInterface.
func (g *group) {{.String}}() {{.PackageName}}.ClusterInterface {
	return {{.PackageName}}.New(g.factory, g.tweakListOptions)
}
{{end -}}

{{if not .useUpstreamInterfaces -}}
type Interface interface {
{{range .versions}}	// {{.String}} provides access to the shared informers in {{.String}}.
	{{.String}}() {{.PackageName}}.Interface
{{end -}}
}

type scopedGroup struct {
	factory internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace string
}

// New returns a new Interface.
func NewScoped(f internalinterfaces.SharedScopedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return &scopedGroup{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}

{{range .versions}}// {{.String}} returns a new {{.PackageName}}.ClusterInterface.
func (g *scopedGroup) {{.String}}() {{.PackageName}}.Interface {
	return {{.PackageName}}.NewScoped(g.factory, g.namespace, g.tweakListOptions)
}
{{end -}}
{{end}}
`
