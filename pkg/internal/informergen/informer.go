/*
Copyright 2022 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package informergen

import (
	"io"
	"text/template"

	"github.com/kcp-dev/code-generator/v2/pkg/parser"
)

type Informer struct {
	// Group is the group in this informer.
	Group parser.Group

	// Kind is the kind in this file.
	Kind parser.Kind

	// APIPackagePath is the root directory under which API types exist.
	// e.g. "k8s.io/api"
	APIPackagePath string

	// PackagePath is the package under which these informers will be exposed.
	// e.g. "github.com/kcp-dev/client-go/clients/informers"
	// TODO(skuznets) we should be able to figure this out from the output dir, ideally
	PackagePath string

	// ClientsetPackagePath is the package under which the cluster-aware client-set will be exposed.
	// e.g. "github.com/kcp-dev/client-go/kubernetes"
	// TODO(skuznets) we should be able to figure this out from the output dir, ideally
	ClientsetPackagePath string

	// ListerPackagePath is the package under which the cluster-aware listers will be exposed.
	// e.g. "github.com/kcp-dev/client-go/clients/listers"
	// TODO(skuznets) we should be able to figure this out from the output dir, ideally
	ListerPackagePath string

	// SingleClusterClientPackagePath is the root directory under which single-cluster-aware clients exist.
	// e.g. "k8s.io/client-go/kubernetes"
	SingleClusterClientPackagePath string `marker:""`

	// SingleClusterInformerPackagePath is the package under which the cluster-unaware listers are exposed.
	// e.g. "k8s.io/client-go/informers"
	SingleClusterInformerPackagePath string

	// SingleClusterListerPackagePath is the fully qualified Go package name under which the (pre-existing)
	// listers for single-cluster contexts are defined. Option. e.g. "k8s.io/client-go/listers"
	SingleClusterListerPackagePath string
}

func (i *Informer) WriteContent(w io.Writer) error {
	templ, err := template.New("informer").Funcs(templateFuncs).Parse(informer)
	if err != nil {
		return err
	}
	m := map[string]interface{}{
		"group":                            i.Group,
		"kind":                             &i.Kind,
		"packagePath":                      i.PackagePath,
		"clientsetPackagePath":             i.ClientsetPackagePath,
		"apiPackagePath":                   i.APIPackagePath,
		"listerPackagePath":                i.ListerPackagePath,
		"singleClusterClientPackagePath":   i.SingleClusterClientPackagePath,
		"singleClusterInformerPackagePath": i.SingleClusterInformerPackagePath,
		"singleClusterListerPackagePath":   i.SingleClusterListerPackagePath,
		"useUpstreamInterfaces":            i.SingleClusterListerPackagePath != "" && i.SingleClusterInformerPackagePath != "",
	}
	return templ.Execute(w, m)
}

var informer = `
// Code generated by kcp code-generator. DO NOT EDIT.

package {{.group.Version.PackageName}}

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	{{.group.GoPackageAlias}} "{{.apiPackagePath}}/{{.group.PackageName}}/{{.group.Version.PackageName}}"
	{{.group.GoPackageAlias}}listers "{{.listerPackagePath}}/{{.group.PackageName}}/{{.group.Version.PackageName}}"
	{{if .useUpstreamInterfaces -}}
	upstream{{.group.GoPackageAlias}}listers "{{.singleClusterListerPackagePath}}/{{.group.PackageName}}/{{.group.Version.PackageName}}"
	upstream{{.group.GoPackageAlias}}informers "{{.singleClusterInformerPackagePath}}/{{.group.PackageName}}/{{.group.Version.PackageName}}"
	{{end -}}

	clientset "{{.clientsetPackagePath}}"
	{{if not .useUpstreamInterfaces -}}	
	scopedclientset "{{.singleClusterClientPackagePath}}"
	{{end -}}

	"{{.packagePath}}/internalinterfaces"
)

// {{.kind}}ClusterInformer provides access to a shared informer and lister for
// {{.kind.Plural}}.
type {{.kind}}ClusterInformer interface {
	Cluster(logicalcluster.Name) {{if .useUpstreamInterfaces}}upstream{{.group.GoPackageAlias}}informers.{{end}}{{.kind}}Informer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() {{.group.GoPackageAlias}}listers.{{.kind}}ClusterLister
}

type {{.kind.String | lowerFirst}}ClusterInformer struct {
	factory internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New{{.kind}}ClusterInformer constructs a new informer for {{.kind.String}} type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func New{{.kind}}ClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFiltered{{.kind}}ClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFiltered{{.kind}}ClusterInformer constructs a new informer for {{.kind.String}} type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFiltered{{.kind}}ClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.{{.group.GroupGoName}}{{.group.Version}}().{{.kind.Plural}}().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.{{.group.GroupGoName}}{{.group.Version}}().{{.kind.Plural}}().Watch(context.TODO(), options)
			},
		},
		&{{.group.GoPackageAlias}}.{{.kind.String}}{},
		resyncPeriod,
		indexers,
	)
}

func (f *{{.kind.String|lowerFirst}}ClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFiltered{{.kind}}ClusterInformer(client, resyncPeriod, cache.Indexers{
			kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
			{{if .kind.IsNamespaced}}kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,{{end -}}
		}, 
		f.tweakListOptions,
	)
}

func (f *{{.kind.String|lowerFirst}}ClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&{{.group.GoPackageAlias}}.{{.kind}}{}, f.defaultInformer)
}

func (f *{{.kind.String|lowerFirst}}ClusterInformer) Lister() {{.group.GoPackageAlias}}listers.{{.kind.String}}ClusterLister {
	return {{.group.GoPackageAlias}}listers.New{{.kind}}ClusterLister(f.Informer().GetIndexer())
}

{{ if not .useUpstreamInterfaces }}
// {{.kind}}Informer provides access to a shared informer and lister for
// {{.kind.Plural}}.
type {{.kind}}Informer interface {
	Informer() cache.SharedIndexInformer
	Lister() {{.group.GoPackageAlias}}listers.{{.kind}}Lister
}
{{end -}}

func (f *{{.kind.String|lowerFirst}}ClusterInformer) Cluster(clusterName logicalcluster.Name) {{if .useUpstreamInterfaces}}upstream{{.group.GoPackageAlias}}informers.{{end}}{{.kind}}Informer {
	return &{{.kind.String|lowerFirst}}Informer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type {{.kind.String|lowerFirst}}Informer struct {
	informer cache.SharedIndexInformer
	lister {{if .useUpstreamInterfaces}}upstream{{end}}{{.group.GoPackageAlias}}listers.{{.kind.String}}Lister
}

func (f *{{.kind.String|lowerFirst}}Informer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *{{.kind.String|lowerFirst}}Informer) Lister() {{if .useUpstreamInterfaces}}upstream{{end}}{{.group.GoPackageAlias}}listers.{{.kind.String}}Lister {
	return f.lister
}

{{if not .useUpstreamInterfaces -}}
type {{.kind.String | lowerFirst}}ScopedInformer struct {
	factory internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	{{if .kind.IsNamespaced}}namespace string{{end -}}
}

func (f *{{.kind.String|lowerFirst}}ScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&{{.group.GoPackageAlias}}.{{.kind}}{}, f.defaultInformer)
}

func (f *{{.kind.String|lowerFirst}}ScopedInformer) Lister() {{.group.GoPackageAlias}}listers.{{.kind.String}}Lister {
	return {{.group.GoPackageAlias}}listers.New{{.kind}}Lister(f.Informer().GetIndexer())
}

// New{{.kind}}Informer constructs a new informer for {{.kind.String}} type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func New{{.kind}}Informer(client scopedclientset.Interface, resyncPeriod time.Duration,{{if .kind.IsNamespaced}} namespace string,{{end -}} indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFiltered{{.kind}}Informer(client, resyncPeriod, {{if .kind.IsNamespaced}} namespace,{{end -}}indexers, nil)
}

// NewFiltered{{.kind}}Informer constructs a new informer for {{.kind.String}} type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFiltered{{.kind}}Informer(client scopedclientset.Interface, resyncPeriod time.Duration, {{if .kind.IsNamespaced}} namespace string,{{end -}}indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.{{.group.GroupGoName}}{{.group.Version}}().{{.kind.Plural}}({{if .kind.IsNamespaced}}namespace{{end -}}).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.{{.group.GroupGoName}}{{.group.Version}}().{{.kind.Plural}}({{if .kind.IsNamespaced}}namespace{{end -}}).Watch(context.TODO(), options)
			},
		},
		&{{.group.GoPackageAlias}}.{{.kind.String}}{},
		resyncPeriod,
		indexers,
	)
}

func (f *{{.kind.String|lowerFirst}}ScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFiltered{{.kind}}Informer(client, resyncPeriod,{{if .kind.IsNamespaced}} f.namespace,{{end -}} cache.Indexers{ {{if .kind.IsNamespaced}}
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
	{{end}}}, f.tweakListOptions)
}
{{end}}
`
